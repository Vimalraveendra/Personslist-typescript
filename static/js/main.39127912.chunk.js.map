{"version":3,"sources":["Components/Person/Person.tsx","Components/PersonsList/PersonsList.tsx","Containers/App.tsx","serviceWorker.js","index.tsx"],"names":["Person","email","picture","first","last","cell","className","alt","srcSet","src","PersonsList","persons","map","user","key","login","uuid","name","large","App","state","fetch","then","response","json","users","setState","results","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sTAoCeA,EA5BgC,SAAC,GAMzC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,KAEA,OACE,yBAAKC,UAAU,kDACb,yBACEA,UAAU,OACVC,IAAI,SACJC,OAAQN,EAAU,QAClBO,IAAKP,IAGP,6BACE,oCACQC,EACLC,GAEH,oCAAUH,GACV,oCAAUI,MCNHK,G,MAnBK,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,QACrB,OACE,yBAAKL,UAAU,yBACZK,EAAQC,KAAI,SAAAC,GACX,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKE,MAAMC,KAChBb,MAAOU,EAAKI,KAAKd,MACjBC,KAAMS,EAAKI,KAAKb,KAChBH,MAAOY,EAAKZ,MACZC,QAASW,EAAKX,QAAQgB,MACtBb,KAAMQ,EAAKR,aC8BRc,G,kNAtBbC,MAAQ,CACNT,QAAS,I,kEAEgB,IAAD,OACxBU,MAAM,iDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OACT,EAAKC,SAAS,CACZf,QAASc,EAAME,e,+BAKrB,OACE,6BACE,wBAAIrB,UAAU,MAAd,eACA,kBAAC,EAAD,CAAaK,QAASiB,KAAKR,MAAMT,e,GAjBvBkB,IAAMC,YCXlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThB,MAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzB,QACfoB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,0BAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,0BAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtClB,MAAMiB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAAC,GAEJ,IAAM2C,EAAc3C,EAAS0C,QAAQE,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMhD,MAAK,SAAAqB,GACjCA,EAAa4B,aAAajD,MAAK,WAC7BW,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMhD,MAAK,WACjC2B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.39127912.chunk.js","sourcesContent":["import React from \"react\";\ninterface PersonStatelessProps {\n  email: string;\n  picture?: string;\n  first: string;\n  last: string;\n  cell: number;\n}\nconst Person: React.FC<PersonStatelessProps> = ({\n  email,\n  picture,\n  first,\n  last,\n  cell,\n}) => {\n  return (\n    <div className=\"tc bg-light-blue br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        className=\"br3 \"\n        alt=\"person\"\n        srcSet={picture + \" 1x, \"}\n        src={picture}\n      />\n\n      <div>\n        <h2>\n          Name:{first}\n          {last}\n        </h2>\n        <p>Email:{email}</p>\n        <p>Phone:{cell}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\nimport Person from \"../Person/Person\";\nimport \"./PersonsList.css\";\nimport { IPersons } from \"../../Containers/App\";\n\nconst PersonsList = ({ persons }: { persons: Array<IPersons> }) => {\n  return (\n    <div className=\"personslist-container\">\n      {persons.map(user => {\n        return (\n          <Person\n            key={user.login.uuid}\n            first={user.name.first}\n            last={user.name.last}\n            email={user.email}\n            picture={user.picture.large}\n            cell={user.cell}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PersonsList;\n","import React from \"react\";\nimport PersonsList from \"../Components/PersonsList/PersonsList\";\nimport \"./App.css\";\n\nexport interface IPersons {\n  name: IpersonsNames;\n  email: string;\n  picture: IpersonsNames;\n  cell: number;\n  login: IpersonsNames;\n}\ninterface IpersonsNames {\n  first: string;\n  last: string;\n  large: string;\n  uuid: number;\n}\n\ninterface IAppProps {}\n\ninterface IAppState {\n  persons: Array<IPersons>;\n}\nclass App extends React.Component<IAppProps, IAppState> {\n  state = {\n    persons: []\n  };\n  componentDidMount(): void {\n    fetch(\"https://randomuser.me/api/?&nat=gb&results=20\")\n      .then(response => response.json())\n      .then(users =>\n        this.setState({\n          persons: users.results\n        })\n      );\n  }\n  render(): JSX.Element {\n    return (\n      <div>\n        <h1 className=\"tc\">PersonsList</h1>\n        <PersonsList persons={this.state.persons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}